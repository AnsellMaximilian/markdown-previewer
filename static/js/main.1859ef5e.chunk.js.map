{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","data/defaultMarkdown.js","serviceWorker.js","index.js"],"names":["Editor","props","handleChange","e","input","target","value","setState","updateMarkdown","clearInput","copyToClipboard","document","querySelector","select","execCommand","state","id","type","this","onChange","placeholder","className","title","onClick","React","Component","marked","setOptions","breaks","Preview","dangerouslySetInnerHTML","__html","markdown","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SA0CeA,E,kDAvCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAKVC,aAAe,SAACC,GACZ,IAAMC,EAAQD,EAAEE,OAAOC,MACvB,EAAKC,SAAS,CACVH,MAAOA,IAEX,EAAKH,MAAMO,eAAeJ,IAXZ,EAclBK,WAAa,WACT,EAAKF,SAAS,CACVH,MAAO,KAEX,EAAKH,MAAMO,eAAe,KAlBZ,EAqBlBE,gBAAkB,WACJC,SAASC,cAAc,WAC/BC,SACNF,SAASG,YAAY,SAtBjB,EAAKC,MAAQ,CACTX,MAAO,IAHG,E,qDA4Bd,OACI,yBAAKY,GAAG,oBAEJ,8BAAUA,GAAG,SAASC,KAAK,WAAWX,MAAOY,KAAKH,MAAMX,MAAOe,SAAUD,KAAKhB,aAAckB,YAAY,4BAAxG,QACA,uBAAGC,UAAU,0BAA0BL,GAAG,gBAAgBM,MAAM,QAAQC,QAASL,KAAKT,aACtF,uBAAGY,UAAU,yBAAyBL,GAAG,cAAcM,MAAM,6BAA6BC,QAASL,KAAKR,uB,GAlCnGc,IAAMC,W,sBCG3BC,IAAOC,WAAW,CAACC,QAAQ,I,IAYZC,E,uKARP,OACI,yBAAKb,GAAG,UAAUc,wBAAyB,CAACC,OAAQL,IAAOR,KAAKjB,MAAM+B,iB,GAH5DR,IAAMC,WC6BbQ,G,wDA1Bb,WAAYhC,GAAO,IAAD,8BAChB,cAAMA,IAMRO,eAAiB,SAACwB,GAChB,EAAKzB,SAAS,CACZyB,SAAUA,KAPZ,EAAKjB,MAAQ,CACXiB,SCba,urCDUC,E,qDAehB,OACE,yBAAKX,UAAU,OACb,kDACA,kBAAC,EAAD,CAAQb,eAAgBU,KAAKV,iBAC7B,kBAAC,EAAD,CAASwB,SAAUd,KAAKH,MAAMiB,gB,GApBpBR,IAAMC,YEGJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1859ef5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Editor extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            input: \"\"\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        const input = e.target.value;\r\n        this.setState({\r\n            input: input\r\n        })\r\n        this.props.updateMarkdown(input)\r\n    }\r\n\r\n    clearInput = () => {\r\n        this.setState({\r\n            input: \"\"\r\n        })\r\n        this.props.updateMarkdown(\"\")\r\n      }\r\n\r\n    copyToClipboard = () => {\r\n    const input = document.querySelector(\"#editor\");\r\n    input.select();\r\n    document.execCommand(\"copy\");\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"editor-container\">\r\n                {/* <h2>Write your markdown here: </h2> */}\r\n                <textarea id=\"editor\" type=\"textarea\" value={this.state.input} onChange={this.handleChange} placeholder=\"Write your markdown here\">test</textarea>\r\n                <i className=\"fas fa-trash top-button\" id=\"delete-button\" title=\"Clear\" onClick={this.clearInput}></i>\r\n                <i className=\"fas fa-copy top-button\" id=\"copy-button\" title=\"Copy markdown to clipboard\" onClick={this.copyToClipboard}></i>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport marked from 'marked';\r\n\r\nimport '../css/preview.css';\r\n\r\nmarked.setOptions({breaks: true})\r\n\r\nclass Preview extends React.Component {\r\n    render(){\r\n        return(\r\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(this.props.markdown)}}>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Preview;","import React from 'react';\n\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\n\nimport defaultMarkdown from './data/defaultMarkdown';\n\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      markdown: defaultMarkdown,\n    }\n  }\n\n  updateMarkdown = (markdown) => {\n    this.setState({\n      markdown: markdown\n    })\n  }\n\n  render(){\n    \n    return (\n      <div className=\"App\" >\n        <h1>Markdown Previewer</h1>\n        <Editor updateMarkdown={this.updateMarkdown}/>\n        <Preview markdown={this.state.markdown}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","let defaultMarkdown = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://avatars3.githubusercontent.com/u/56351143?s=400&u=5cb53a9943b1950ff383bcef823c1e2e78c421e4&v=4)\r\n`\r\n\r\nexport default defaultMarkdown;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}